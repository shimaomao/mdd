/*
 * This file is generated by jOOQ.
*/
package es.eci.catalog.model.tables;


import es.eci.catalog.model.Keys;
import es.eci.catalog.model.Public;
import es.eci.catalog.model.tables.records.ItemImage_Record;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItemImage_ extends TableImpl<ItemImage_Record> {

    private static final long serialVersionUID = -660275739;

    /**
     * The reference instance of <code>public.item_image_</code>
     */
    public static final ItemImage_ ITEM_IMAGE_ = new ItemImage_();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemImage_Record> getRecordType() {
        return ItemImage_Record.class;
    }

    /**
     * The column <code>public.item_image_._id_</code>.
     */
    public final TableField<ItemImage_Record, Integer> _ID_ = createField("_id_", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('item_image___id__seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.item_image_._item_id_</code>.
     */
    public final TableField<ItemImage_Record, Integer> _ITEM_ID_ = createField("_item_id_", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.item_image_.alt_text_</code>.
     */
    public final TableField<ItemImage_Record, String> ALT_TEXT_ = createField("alt_text_", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.item_image_.image_</code>.
     */
    public final TableField<ItemImage_Record, String> IMAGE_ = createField("image_", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.item_image_._search_</code>.
     */
    public final TableField<ItemImage_Record, Object> _SEARCH_ = createField("_search_", org.jooq.impl.DefaultDataType.getDefaultDataType("tsvector"), this, "");

    /**
     * The column <code>public.item_image_._types_</code>.
     */
    public final TableField<ItemImage_Record, String[]> _TYPES_ = createField("_types_", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.item_image_._last_modified_</code>.
     */
    public final TableField<ItemImage_Record, String> _LAST_MODIFIED_ = createField("_last_modified_", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.item_image_._version_</code>.
     */
    public final TableField<ItemImage_Record, Integer> _VERSION_ = createField("_version_", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.item_image_</code> table reference
     */
    public ItemImage_() {
        this("item_image_", null);
    }

    /**
     * Create an aliased <code>public.item_image_</code> table reference
     */
    public ItemImage_(String alias) {
        this(alias, ITEM_IMAGE_);
    }

    private ItemImage_(String alias, Table<ItemImage_Record> aliased) {
        this(alias, aliased, null);
    }

    private ItemImage_(String alias, Table<ItemImage_Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ItemImage_Record, Integer> getIdentity() {
        return Keys.IDENTITY_ITEM_IMAGE_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ItemImage_Record> getPrimaryKey() {
        return Keys.ITEM_IMAGE__PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ItemImage_Record>> getKeys() {
        return Arrays.<UniqueKey<ItemImage_Record>>asList(Keys.ITEM_IMAGE__PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ItemImage_Record, ?>> getReferences() {
        return Arrays.<ForeignKey<ItemImage_Record, ?>>asList(Keys.ITEM_IMAGE___ITEM_IMAGE_MASTER_);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<ItemImage_Record, Integer> getRecordVersion() {
        return _VERSION_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ItemImage_ as(String alias) {
        return new ItemImage_(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemImage_ rename(String name) {
        return new ItemImage_(name, null);
    }
}
