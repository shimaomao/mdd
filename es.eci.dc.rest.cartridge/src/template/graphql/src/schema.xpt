«IMPORT dc»
«EXTENSION helpers::functions-»
«DEFINE main FOR Domain»
«FILE "src/main/scala/graphql/SchemaDefinition.scala"-»
package graphql


import argonaut._, Argonaut._

import sangria.macros.derive._
import sangria.schema._

import sangria.marshalling._
import sangria.marshalling.argonaut._
import sangria.execution.deferred.DeferredResolver
import sangria.ast.Document
import sangria.execution.ErrorWithResolver
import sangria.execution.Executor
import sangria.execution.QueryAnalysisError
import sangria.parser._

import io.vertx.core.Vertx
import io.vertx.core.http.HttpServerResponse

import scala.concurrent.Future
import scala.concurrent.ExecutionContext.Implicits.global
import scala.util.{Failure, Success, Try}

object SchemaDefinition {
«FOREACH attributeSets.select(e | e.metaType == dc::Entity && ((Entity) e).independent) AS entityM-»
	«LET ((Entity) entityM) AS entity»
	  
  val «entity.name»Type = ObjectType(
    "«entity.name»",
    "«entity.comments»",

	fields[Unit, «entity.name»](
	  Field("id", IntType, 
      	description = Some("Id of «entity.name»"),
      	resolve = _.value.id)
	«FOREACH getAllAttributes(entity) AS attribute-»
		«IF attribute.entity.name == entity.name-»
			«IF attribute.cardinality == AttributeCardinality::MANY-»
	, Field("«attribute.name»", ListType(IntType),
        description = Some("«attribute.comments»"),
        resolve = _.value.«attribute.name»)
			«ELSE-»
	, Field("«attribute.name»", IntType,
        description = Some("«attribute.comments»"),
        resolve = _.value.«attribute.name»)
			«ENDIF-»
		«ELSE-»
	, Field("«attribute.name»", «attribute.getSangriaModelType()»,
        description = Some("«attribute.comments»"),
        resolve = _.value.«attribute.name»)
		«ENDIF-»
    «ENDFOREACH-»
    )
  )
	«ENDLET-»
«ENDFOREACH-»

  val Id = Argument("id", StringType)

  val QueryType = ObjectType("Query", fields[CatalogRepo, Unit](
    Field("category", OptionType(CategoryType),
      description = Some("Returns a category with specific `id`."),
      arguments = Id :: Nil,
      resolve = c => c.ctx.category(c arg Id)),

    Field("categories", ListType(CategoryType),
      description = Some("Returns a list of all available categories."),
      resolve = _.ctx.categories)
  ))

  val schema = Schema(QueryType)
}

object QueryProcessor {
  
  def decodeQuery(json: String): Option[Json] = for {
     parsed <- json.parseOption
  } yield parsed
  
  
  
  def process(json: String, response: HttpServerResponse, vertx: Vertx) = {
    val parsed = decodeQuery(json).get
    val query = jObjectPL >=> jsonObjectPL("query") >=> jStringPL
    val operationName = jObjectPL >=> jsonObjectPL("operationName") >=> jStringPL
    val variables = jObjectPL >=> jsonObjectPL("variables") >=> jObjectPL
    
    //variables.get(parsed).get
   
    QueryParser.parse(query.get(parsed).get) match {
      // query parsed successfully, time to execute it!
      case Success(queryAst) =>
        executeGraphQLQuery(queryAst, operationName.get(parsed), jEmptyObject, response, vertx)

      // can't parse GraphQL query, return error
      case Failure(error) =>
        output(response, 500, Json("error"-> jString(error.getMessage)))
    }    
  }
  
  def executeGraphQLQuery(query: Document, op: Option[String], vars: Json, response: HttpServerResponse, vertx: Vertx) =
    Executor.execute(SchemaDefinition.schema, query, CatalogRepo(vertx), operationName = op)
      .map(output(response, 200, _))
      .recover {
        case error: QueryAnalysisError => output(response, 501, error.resolveError)
        case error: ErrorWithResolver=> output(response, 503, error.resolveError)
      }
  
  def output(response: HttpServerResponse, statusCode:Int, json: Json) =
    response.end(json.toString());
}

«ENDFILE-»
«ENDDEFINE-»
