«IMPORT dc»
«EXTENSION helpers::functions-»
«DEFINE main FOR Domain»
	«FOREACH attributeSets.select(e | e.metaType == dc::Entity && ((Entity) e).independent) AS entity-»
		«FILE "src/main/java/services/" + ((Entity) entity).pluralName.toLowerCase() + "/Patch.java"-»
package services.«((Entity) entity).pluralName.toLowerCase()»;

import static es.eci.catalog.model.Tables.*;

import java.util.Optional;

import javax.transaction.NotSupportedException;
import javax.transaction.SystemException;
import javax.transaction.UserTransaction;

import org.jooq.DSLContext;

import es.eci.catalog.model.converters.BeanPOJOConverter;
import es.eci.catalog.model.converters.POJOBeanConverter;
import es.eci.catalog.model.pojos.*;
import es.eci.catalog.model.pojos.db.*;
import es.eci.catalog.model.tables.records.*;
import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.JsonObject;
import io.vertx.core.logging.Logger;
import io.vertx.core.logging.LoggerFactory;
import services.ECIServiceVerticle;

public class Patch extends ECIServiceVerticle {
	final Logger logger = LoggerFactory.getLogger(Patch.class);
	
	protected void executeService(UserTransaction ut, DSLContext create, Message<Object> message)
			throws NotSupportedException, SystemException {
		«((Entity) entity).name» entity = («((Entity) entity).name») message.body();
		
		«entity.name»Bean jooqBean = POJOBeanConverter.entity2Bean(create, entity);
		
		«((Entity) entity).pluralName.toFirstUpper()»Record entityRecord = create.fetchOne(«underscored(((Entity) entity).pluralName).toUpperCase()», «underscored(((Entity) entity).pluralName).toUpperCase()»._ID.eq(jooqBean.getId()));
		
		int numberCreated = -1;
		if (entityRecord != null) {
			entityRecord.from(jooqBean);
			numberCreated = entityRecord.update();
		}
		
		if (numberCreated > 0) {
			DeliveryOptions options = new DeliveryOptions();
			options.setCodecName("«((Entity) entity).pluralName.toLowerCase()»inversecodec");
			«((Entity) entity).name»Bean updatedEntity = new «((Entity) entity).name»Bean();
			entityRecord.into(updatedEntity);
			updatedEntity.setId(entityRecord.get_Id());
			message.reply(BeanPOJOConverter.to«((Entity) entity).name»(create, updatedEntity), options);
		} else {
			message.reply(new JsonObject("{\"errors\": [\"Error al insertar record\"]}"));
		}
	}		
}		
«ENDFILE-»
	«ENDFOREACH-»
«ENDDEFINE-»
